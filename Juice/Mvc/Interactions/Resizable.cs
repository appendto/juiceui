using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;

namespace Juice.Mvc {

	public partial class JuiceHelpers {

		/// <summary>
		/// 
		/// </summary>
		/// <param name="target">Specifies a selector identifying the element the widget should be applied to.</param>
		/// <param name="disabled">Disables the Resizable if set to true.</param>
		/// <param name="alsoResize">One or more elements to resize synchronously with the resizable element.</param>
		/// <param name="animate">Animates to the final size after resizing.</param>
		/// <param name="animateDuration">How long to animate when using the animate option.</param>
		/// <param name="animateEasing">Which easing to apply when using the animate option.</param>
		/// <param name="aspectRatio">Whether the element should be constrained to a specific aspect ratio.</param>
		/// <param name="autoHide">Whether the handles should hide when the user is not hovering over the element.</param>
		/// <param name="cancel">Prevents resizing from starting on specified elements.</param>
		/// <param name="containment">Constrains resizing to within the bounds of the specified element or region.</param>
		/// <param name="delay">Tolerance, in milliseconds, for when resizing should start. If specified, resizing will not start until after mouse is moved beyond duration. This can help prevent unintended resizing when clicking on an element.</param>
		/// <param name="distance">Tolerance, in pixels, for when resizing should start. If specified, resizing will not start until after mouse is moved beyond distance. This can help prevent unintended resizing when clicking on an element.</param>
		/// <param name="ghost">If set to true, a semi-transparent helper element is shown for resizing.</param>
		/// <param name="grid">Snaps the resizing element to a grid, every x and y pixels. Array values: [ x, y ].</param>
		/// <param name="handles">Which handles can be used for resizing. A comma delimited list of any of the following: n, e, s, w, ne, se, sw, nw, all. The necessary handles will be auto-generated by the plugin.</param>
		/// <param name="helper">A class name that will be added to a proxy element to outline the resize during the drag of the resize handle. Once the resize is complete, the original element is sized.</param>
		/// <param name="maxHeight">The maximum height the resizable should be allowed to resize to.</param>
		/// <param name="maxWidth">The maximum width the resizable should be allowed to resize to.</param>
		/// <param name="minHeight">The minimum height the resizable should be allowed to resize to.</param>
		/// <param name="minWidth">The minimum width the resizable should be allowed to resize to.</param>
		/// <returns></returns>
		public ResizableWidget Resizable(String target = "", Boolean disabled = false,
			String alsoResize = null,
			Boolean animate = false,
			dynamic animateDuration = null,
			String animateEasing = "swing",
			dynamic aspectRatio = null,
			Boolean autoHide = false,
			String cancel = null,
			dynamic containment = null,
			int delay = 0,
			int distance = 1,
			Boolean ghost = false,
			int[] grid = null,
			String handles = null,
			String helper = null,
			int maxHeight = -1,
			int maxWidth = -1,
			int minHeight = 10,
			int minWidth = 10			
			) {
			var widget = new ResizableWidget(_helper);

			widget.SetCoreOptions(null, target);
			widget.Options(disabled, 
				alsoResize,
				animate,
				animateDuration,
				animateEasing,
				aspectRatio,
				autoHide,
				cancel,
				containment,
				delay,
				distance,
				ghost,
				grid,
				handles,
				helper,
				maxHeight,
				maxWidth,
				minHeight,
				minWidth
			);

			return widget;
		}

	}

	public class ResizableWidget : JuiceWidget<ResizableWidget>, IDisposable {

		public ResizableWidget(HtmlHelper helper) : base(helper, "resizable") { }

		public ResizableWidget Options(Boolean disabled = false, 
			String alsoResize = null,
			Boolean animate = false,
			dynamic animateDuration = null,
			String animateEasing = "swing",
			dynamic aspectRatio = null,
			Boolean autoHide = false,
			String cancel = null,
			dynamic containment = null,
			int delay = 0,
			int distance = 1,
			Boolean ghost = false,
			int[] grid = null,
			String handles = null,
			String helper = null,
			int maxHeight = -1,
			int maxWidth = -1,
			int minHeight = 10,
			int minWidth = 10			
			) {
			base.SetOptions(
				JuiceHelpers.GetMemberInfo(() => disabled),
				JuiceHelpers.GetMemberInfo(() => alsoResize),
				JuiceHelpers.GetMemberInfo(() => animate),
				JuiceHelpers.GetMemberInfo(() => animateDuration),
				JuiceHelpers.GetMemberInfo(() => animateEasing),
				JuiceHelpers.GetMemberInfo(() => aspectRatio),
				JuiceHelpers.GetMemberInfo(() => autoHide),
				JuiceHelpers.GetMemberInfo(() => cancel),
				JuiceHelpers.GetMemberInfo(() => containment),
				JuiceHelpers.GetMemberInfo(() => delay),
				JuiceHelpers.GetMemberInfo(() => distance),
				JuiceHelpers.GetMemberInfo(() => ghost),
				JuiceHelpers.GetMemberInfo(() => grid),
				JuiceHelpers.GetMemberInfo(() => handles),
				JuiceHelpers.GetMemberInfo(() => helper),
				JuiceHelpers.GetMemberInfo(() => maxHeight),
				JuiceHelpers.GetMemberInfo(() => maxWidth),
				JuiceHelpers.GetMemberInfo(() => minHeight),
				JuiceHelpers.GetMemberInfo(() => minWidth)
			);

			return this;
		}

	}
}
